using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using PingORM.Configuration;

namespace PingORM
{
    /// <summary>
    /// Represents a mapping between a code entity and a DB table.
    /// </summary>
    public class TableMapping
    {
        public string Key { get; set; }
        public string TableName { get; set; }
        public string SequenceName { get; set; }
        public List<ColumnMapping> Columns { get; set; }
        public ColumnMapping PartitionKey { get { return Columns.FirstOrDefault(c => c.IsPartitionKey); } }
        public bool IsPartitioned { get { return PartitionKey != null; } }
        public string InsertExpression { get; set; }
        public string DeleteExpression { get; set; }
        public string UpdateExpression { get; set; }
        public string SelectExpression { get; set; }
        public string GetExpression { get; set; }
        public bool CachingEnabled { get; set; }

        public TableMapping()
        {
            this.Columns = new List<ColumnMapping>();
        }

        public TableMapping(DataEntityAttribute tableAttribute, Type type)
            : this()
        {
            this.Key = tableAttribute.Key;
            this.TableName = tableAttribute.TableName;
            this.SequenceName = tableAttribute.SequenceName;
            this.CachingEnabled = !tableAttribute.DisableCaching;

            this.LoadColumns(type, null);
            this.Initialize();
        }

        public TableMapping(TableMappingSettings tableMapping)
            : this()
        {
            this.Key = tableMapping.Key;
            this.TableName = tableMapping.TableName;
            this.SequenceName = tableMapping.SequenceName;

            this.LoadColumns(tableMapping);
            this.Initialize();
        }

        /// <summary>
        /// Loads the column attributes attached to the specified type's properties.
        /// </summary>
        /// <param name="mapping"></param>
        /// <param name="type"></param>
        protected void LoadColumns(Type type, PropertyInfo parentProperty)
        {
            foreach (PropertyInfo property in type.GetProperties())
            {
                object[] propertyAttrs = property.GetCustomAttributes(typeof(ColumnAttribute), true);
                if (propertyAttrs.Length > 0)
                {
                    ColumnAttribute columnAttr = propertyAttrs[0] as ColumnAttribute;

                    if (columnAttr.IsNestedType)
                        this.LoadColumns(property.PropertyType, property);
                    else
                        this.Columns.Add(new ColumnMapping(property, columnAttr, parentProperty));
                }
            }
        }

        /// <summary>
        /// Loads the column attributes attached to the specified type's properties.
        /// </summary>
        /// <param name="mapping"></param>
        /// <param name="type"></param>
        protected void LoadColumns(TableMappingSettings tableMapping)
        {
            Type type = Type.GetType(tableMapping.EntityName);
            foreach (ColumnMappingSettings columnMapping in tableMapping.Columns)
                this.Columns.Add(new ColumnMapping(columnMapping, type));
        }

        public void Initialize()
        {
            GenerateInsertExpression();
            GenerateDeleteExpression();
            GenerateUpdateExpression();
            GenerateSelectExpression();
            GenerateGetExpression();
        }

        public void GenerateInsertExpression()
        {
            StringBuilder columnStr = new StringBuilder();
            StringBuilder valueStr = new StringBuilder();

            int i = 0;
            foreach (ColumnMapping column in Columns)
            {
                if (SessionFactory.Provider == DataProvider.MySql && column.IsAutoGenerated)
                    continue;

                columnStr.Append(String.Format("{0},", DataMapper.EscapeName(column.ColumnName)));
                valueStr.Append(String.Format("{0},", DataMapper.ParamName(i++)));
            }

            this.InsertExpression = String.Format("INSERT INTO {0} ({1}) VALUES ({2});", DataMapper.EscapeName(this.TableName),
                columnStr.ToString().TrimEnd(new char[] { ',' }), valueStr.ToString().TrimEnd(new char[] { ',' }));
        }

        public void GenerateDeleteExpression()
        {
            StringBuilder whereStr = new StringBuilder();

            int i = 0;
            foreach (ColumnMapping column in Columns.Where(c => c.IsPk))
            {
                if (whereStr.Length > 0)
                    whereStr.Append(" AND ");

                whereStr.Append(String.Format("{0} = {1}", DataMapper.EscapeName(column.ColumnName), DataMapper.ParamName(i++)));
            }

            this.DeleteExpression = String.Format("DELETE FROM {0} WHERE {1};", DataMapper.EscapeName(this.TableName), whereStr.ToString());
        }

        public void GenerateUpdateExpression()
        {
            StringBuilder columnStr = new StringBuilder();
            StringBuilder whereStr = new StringBuilder();

            int i = 0;
            foreach (ColumnMapping column in Columns)
            {
                if (column.IsPk || column.IsPartitionKey)
                {
                    if (whereStr.Length > 0)
                        whereStr.Append(" AND ");

                    whereStr.Append(String.Format("{0} = {1}", DataMapper.EscapeName(column.ColumnName), DataMapper.ParamName(i++)));
                }
                else
                    columnStr.Append(String.Format("{0} = {1},", DataMapper.EscapeName(column.ColumnName), DataMapper.ParamName(i++)));
            }

            this.UpdateExpression = String.Format("UPDATE {0} SET {1} WHERE {2};", DataMapper.EscapeName(this.TableName),
                columnStr.ToString().TrimEnd(new char[] { ',' }), whereStr.ToString());
        }

        public void GenerateSelectExpression()
        {
            StringBuilder columnStr = new StringBuilder();
            StringBuilder whereStr = new StringBuilder();

            foreach (ColumnMapping column in Columns)
                columnStr.Append(String.Format("{0},", DataMapper.EscapeName(column.ColumnName)));

            this.SelectExpression = String.Format("SELECT {0} FROM {1}", columnStr.ToString().TrimEnd(new char[] { ',' }), DataMapper.EscapeName(this.TableName));
        }

        public void GenerateGetExpression()
        {
            StringBuilder whereStr = new StringBuilder();

            int i = 0;
            foreach (ColumnMapping column in Columns)
            {
                if (column.IsPk || column.IsPartitionKey)
                {
                    if (whereStr.Length > 0)
                        whereStr.Append(" AND ");

                    whereStr.Append(String.Format("{0} = {1}", DataMapper.EscapeName(column.ColumnName), DataMapper.ParamName(column.IsPk ? String.Format("_id{0}", i++) : "ts")));
                }
            }

            this.GetExpression = String.Format("{0} WHERE {1}", this.SelectExpression, whereStr.ToString());
        }
    }
}

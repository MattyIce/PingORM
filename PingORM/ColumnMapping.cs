using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using PingORM.Configuration;

namespace PingORM
{

    /// <summary>
    /// Represents a mapping between a code entity property and a DB table column.
    /// </summary>
    public class ColumnMapping
    {
        static log4net.ILog Log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        public PropertyInfo PropertyInfo { get; set; }
        public string PropertyName { get; set; }
        public string ColumnName { get; set; }
        public Type PropertyType { get; set; }
        public DbType DbType { get; set; }
        public bool IsPk { get; set; }
        public bool IsPartitionKey { get; set; }
        public bool IsAutoGenerated { get; set; }
        public PropertyInfo ParentPropertyInfo { get; set; }

        public ColumnMapping(PropertyInfo property, ColumnAttribute attr)
        {
            this.PropertyInfo = property;
            this.PropertyType = property.PropertyType;
            this.PropertyName = property.Name;
            this.ColumnName = attr.Name;
            this.IsPk = attr.IsPrimaryKey;
            this.IsPartitionKey = attr.IsPartitionKey;
            this.IsAutoGenerated = attr.IsAutoGenerated;

            this.DbType = GetDbType(this.PropertyType);
        }

        public ColumnMapping(PropertyInfo property, ColumnAttribute attr, PropertyInfo parentPropertyInfo)
            : this(property, attr)
        {
            this.ParentPropertyInfo = parentPropertyInfo;
        }

        public ColumnMapping(ColumnMappingSettings columnMapping, Type type)
        {
            try
            {
                this.PropertyName = columnMapping.PropertyName;
                this.ColumnName = columnMapping.ColumnName;
                this.IsPk = columnMapping.IsPrimaryKey;
                this.IsPartitionKey = columnMapping.IsPartitionKey;

                if (String.IsNullOrEmpty(columnMapping.ParentPropertyName))
                    this.PropertyInfo = type.GetProperty(this.PropertyName);
                else
                {
                    this.ParentPropertyInfo = type.GetProperty(columnMapping.ParentPropertyName);
                    this.PropertyInfo = this.ParentPropertyInfo.PropertyType.GetProperty(this.PropertyName);
                }

                this.PropertyType = this.PropertyInfo.PropertyType;
                this.DbType = GetDbType(this.PropertyType);
            }
            catch (Exception ex) { Log.Error(String.Format("Error creating mapping for property [{0}] to column [{1}].", columnMapping.PropertyName, columnMapping.ColumnName), ex); }
        }

        /// <summary>
        /// Gets the value of the property represented by this mapping object in the passed in entity.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public object GetValue(object entity)
        {
            return (this.ParentPropertyInfo == null) ?
                this.PropertyInfo.GetValue(entity, null) :
                this.PropertyInfo.GetValue(this.ParentPropertyInfo.GetValue(entity, null), null);
        }

        /// <summary>
        /// Sets the value of the property represented by this mapping object in the passed in entity.
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="value"></param>
        public void SetValue(object entity, object value)
        {
            if (this.ParentPropertyInfo == null)
                PropertyInfo.SetValue(entity, value, null);
            else
            {
                object parentPropertyValue = ParentPropertyInfo.GetValue(entity, null);

                if (parentPropertyValue == null)
                    parentPropertyValue = Activator.CreateInstance(ParentPropertyInfo.PropertyType);

                // Set the value of the current nested property.
                PropertyInfo.SetValue(parentPropertyValue, value, null);

                // Set the value of the parent property.
                ParentPropertyInfo.SetValue(entity, parentPropertyValue, null);
            }
        }

        public static DbType GetDbType(Type type)
        {
            // If the property is an enum or nullable type then get the underlying type name.
            if (type.BaseType.Name.ToLower() == "enum")
                type = Enum.GetUnderlyingType(type);
            else if (type.Name.ToLower().StartsWith("nullable") && type.IsGenericType)
                type = type.GetGenericArguments()[0];

            switch (type.Name.ToLower())
            {
                case "string":
                    return DbType.String;
                case "int16":
                    return DbType.Int16;
                case "int32":
                    return DbType.Int32;
                case "int64":
                    return DbType.Int64;
                case "decimal":
                    return DbType.Decimal;
                case "double":
                    return DbType.Double;
                case "datetime":
                    return DbType.DateTime;
                case "boolean":
                    return DbType.Boolean;
                case "guid":
                    return DbType.Guid;
            }

            return DbType.String;
        }
    }
}
